#!/usr/bin/env bash
# vim: ft=sh
#
# bootstrap installs things.
# https://github.com/holman/dotfiles

# NOTE: returning 0 == True, returning 1 == False

UPDATE_PACMAN=
POSITIONAL=()
while [[ "$#" -gt 0 ]]; do
  key="$1"
  case $key in
    -u|--update)
      UPDATE_PACMAN=1
      shift
    ;;
    *)
      POSITIONAL+=("$1")
      shift
    ;;
  esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

if [ -z "$XDG_CONFIG_HOME"]; then
  export XDG_CONFIG_HOME="$HOME/.config"
fi

cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd)

# Make sure a log directory exists.
if [ ! -d "$DOTFILES_ROOT/logs" ]; then
  mkdir "$DOTFILES_ROOT"/logs
fi
# Find the name for the next log file.
logFile="$DOTFILES_ROOT/logs/log"
i="1"
while [ -e "$logFile" ]
do
  logFile="$DOTFILES_ROOT/logs/log$i"
  i=$[$i+1]
done
touch "$logFile"

set -e

echo ''

hasCommand () {
  command -v "$1" >/dev/null 2>&1 ;
}

isCygwin () {
  [ "$(uname -o)" == "Cygwin" ];
}

isOSX () {
  [ "$(uname -s)" == "Darwin" ];
}

isWSL () {
  [ -f /proc/sys/kernel/osrelease ] && \
    [[ "$(cat /proc/sys/kernel/osrelease)" == *"Microsoft" ]];
}

# I know that the way I'm using this (basically if has apt-get) doesn't match what
# this checks, but whatever.
isLinux () {
  [ "$(uname -s)" == "Linux" ];
}

info () {
  printf "  [ \033[00;34m..\033[0m ] $1\n"
  echo -e "Info: $1\n" >> "$logFile"
}

user () {
  printf "\r  [ \033[0;33m?\033[0m ] $1 \n"
  echo -e "User: $1\n" >>  "$logFile"
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
  echo -e "Success: $1\n" >>  "$logFile"
}

warn () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo -e "Warn: $1\n" >>  "$logFile"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo -e "Fail: $1\n" >>  "$logFile"
  echo ''
  exit
}

install_pacman() {
  # If we're on a Mac, let's install and setup homebrew.
  if isOSX
  then
    if ! hasCommand brew; then
      info "installing Mac dependencies"
      if source os/mac.sh >/tmp/dotfiles-dot 2>&1
      then
        success "dependencies installed"
      else
        fail "error installing dependencies"
      fi
    fi
  # If we're on linux, let's update apt-get
  elif isLinux
  then
    info "installing Linux dependencies"
    if source os/linux.sh
    then
      success "dependencies installed"
    else
      fail "error installing dependencies"
    fi
  fi
}

if [ -n "$UPDATE_PACMAN" ]; then
  install_pacman
fi
source "$DOTFILES_ROOT"/script/link_dots
# source "$DOTFILES_ROOT"/script/install
# source "$DOTFILES_ROOT"/script/postinstall


echo ''
echo '  All installed!'
