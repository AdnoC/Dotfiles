# vim: ft=sh
#!/usr/bin/env bash
#
# bootstrap installs things.
# https://github.com/holman/dotfiles

# NOTE: returning 0 == True, returning 1 == False

if [ -z "$XDG_CONFIG_HOME"]; then
  export XDG_CONFIG_HOME="$HOME/.config"
fi

cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd)

# Make sure a log directory exists.
if [ ! -d "$DOTFILES_ROOT/logs" ]; then
  mkdir "$DOTFILES_ROOT"/logs
fi
# Find the name for the next log file.
logFile="$DOTFILES_ROOT/logs/log"
i="1"
while [ -e "$logFile" ]
do
  logFile="$DOTFILES_ROOT/logs/log$i"
  i=$[$i+1]
done
touch "$logFile"

set -e

echo ''

hasCommand () {
  command -v "$1" >/dev/null 2>&1 ;
}

isCygwin () {
  [ "$(uname -o)" == "Cygwin" ];
}

isOSX () {
  [ "$(uname -s)" == "Darwin" ];
}

# I know that the way I'm using this (basically if has apt-get) doesn't match what
# this checks, but whatever.
isLinux () {
  [ "$(uname -s)" == "Linux" ];
}

info () {
  printf "  [ \033[00;34m..\033[0m ] $1\n"
  echo -e "Info: $1\n" >> "$logFile"
}

user () {
  printf "\r  [ \033[0;33m?\033[0m ] $1 \n"
  echo -e "User: $1\n" >>  "$logFile"
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
  echo -e "Success: $1\n" >>  "$logFile"
}

warn () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo -e "Warn: $1\n" >>  "$logFile"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo -e "Fail: $1\n" >>  "$logFile"
  echo ''
  exit
}

link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]
      then

        skip=true;

      else

        user "File already exists: $(basename "$src"), what do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$1" "$2"
    success "linked $1 to $2"
  fi
}

install_dotfiles () {
  info 'installing dotfiles'

  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink')
  do
    dst="$HOME/$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done
}


# If we're on a Mac, let's install and setup homebrew.
if isOSX
then
  if ! hasCommand brew; then
    info "installing Mac dependencies"
    if source os/mac.sh >/tmp/dotfiles-dot 2>&1
    then
      success "dependencies installed"
    else
      fail "error installing dependencies"
    fi
  fi
# If we're on linux, let's update apt-get
elif isLinux
then
  info "installing Linux dependencies"
  if source os/linux.sh
  then
    success "dependencies installed"
  else
    fail "error installing dependencies"
  fi
fi

install_dotfiles
source "$DOTFILES_ROOT"/script/install
source "$DOTFILES_ROOT"/script/postinstall


echo ''
echo '  All installed!'
