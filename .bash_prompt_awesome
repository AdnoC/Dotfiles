# Sexy Bash Prompt, inspired by "Extravagant Zsh Prompt"
# Screenshot: http://img.gf3.ca/d54942f474256ec26a49893681c49b5a.png
# A big thanks to \amethyst on Freenode

if [[ $COLORTERM = gnome-* && $TERM = xterm ]]  && infocmp gnome-256color >/dev/null 2>&1; then export TERM=gnome-256color
elif infocmp xterm-256color >/dev/null 2>&1; then export TERM=xterm-256color
fi

if tput setaf 1 &> /dev/null; then
    tput sgr0
    if [[ $(tput colors) -ge 256 ]] 2>/dev/null; then
      if [ $SOL_FLAVOR = "light" ]; then
        GREEN=$(tput setaf 22)
        PURPLE=$(tput setaf 57)
        MAGENTA=$(tput setaf 88)
        ORANGE=$(tput setaf 202)
        WHITE=$(tput setaf 233)
      else
        GREEN=$(tput setaf 190)
        PURPLE=$(tput setaf 141)
        MAGENTA=$(tput setaf 9)
        ORANGE=$(tput setaf 172)
        if [ $SOL_FLAVOR = "dark" ]; then
          WHITE=$(tput setaf 244)
        else
          WHITE=$(tput setaf 256)
        fi
      fi
    else
      MAGENTA=$(tput setaf 5)
      ORANGE=$(tput setaf 4)
      GREEN=$(tput setaf 2)
      PURPLE=$(tput setaf 1)
      WHITE=$(tput setaf 7)
    fi
    BOLD=$(tput bold)
    RESET=$(tput sgr0)
else
    MAGENTA="\033[1;31m"
    ORANGE="\033[1;33m"
    GREEN="\033[1;32m"
    PURPLE="\033[1;35m"
    WHITE="\033[1;37m"
    BOLD=""
    RESET="\033[m"
fi
source ~/git-prompt.sh

# Taken from promptline.vim and modified
function __promptline_git_status {
  [[ $(git rev-parse --is-inside-work-tree 2>/dev/null) == true ]] || return 1

  local added_symbol="●"
  local unmerged_symbol="✖"
  local modified_symbol="✚"
  local clean_symbol="✔"
  local has_untracked_files_symbol="…"

  local ahead_symbol="↑"
  local behind_symbol="↓"

  local unmerged_count=0 modified_count=0 has_untracked_files=0 added_count=0 is_clean=""

  set -- $(git rev-list --left-right --count @{upstream}...HEAD 2>/dev/null)
  local behind_count=$1
  local ahead_count=$2

  # Added (A), Copied (C), Deleted (D), Modified (M), Renamed (R), changed (T), Unmerged (U), Unknown (X), Broken (B)
  while read line; do
    case "$line" in
      M*) modified_count=$(( $modified_count + 1 )) ;;
      U*) unmerged_count=$(( $unmerged_count + 1 )) ;;
    esac
  # Made any errors from the git diff be sent to /dev/null
  done < <(git diff --name-status 2> /dev/null)

  while read line; do
    case "$line" in
      *) added_count=$(( $added_count + 1 )) ;;
    esac
  # Made any errors from the git diff be sent to /dev/null
  done < <(git diff --name-status --cached 2> /dev/null)

  # Made any errors from the ls-files be sent to /dev/null
  if [ -n "$(git ls-files --others --exclude-standard 2>/dev/null)" ]; then
    has_untracked_files=1
  fi

  if [ $(( unmerged_count + modified_count + has_untracked_files + added_count )) -eq 0 ]; then
    is_clean=1
  fi

  local leading_whitespace=""
  [[ $ahead_count -gt 0 ]]         && { printf "%s" "$leading_whitespace$ahead_symbol$ahead_count"; leading_whitespace=" "; }
  [[ $behind_count -gt 0 ]]        && { printf "%s" "$leading_whitespace$behind_symbol$behind_count"; leading_whitespace=" "; }
  [[ $modified_count -gt 0 ]]      && { printf "%s" "$leading_whitespace$modified_symbol$modified_count"; leading_whitespace=" "; }
  [[ $unmerged_count -gt 0 ]]      && { printf "%s" "$leading_whitespace$unmerged_symbol$unmerged_count"; leading_whitespace=" "; }
  [[ $added_count -gt 0 ]]         && { printf "%s" "$leading_whitespace$added_symbol$added_count"; leading_whitespace=" "; }
  [[ $has_untracked_files -gt 0 ]] && { printf "%s" "$leading_whitespace$has_untracked_files_symbol"; leading_whitespace=" "; }
  [[ $is_clean -gt 0 ]]            && { printf "%s" "$leading_whitespace$clean_symbol"; leading_whitespace=" "; }
}

# Takes from promptline.vim and modified
function __promptline_vcs_branch {
  local branch
  local branch_symbol=""

  # git
  if hash git 2>/dev/null; then
    if branch=$( { git symbolic-ref --quiet HEAD || git rev-parse --short HEAD; } 2>/dev/null ); then
      branch=${branch##*/}
      printf "%s" "${branch_symbol}${branch:-unknown}"
      # Added the call to git changes and the switch to disable it.
      if [[ -n $PRINT_GIT_CHANGES ]]; then
        printf " ("
        __promptline_git_status
        printf ")"
      fi
      return
    fi
  fi
  return 1
}

# Controls whether the prompt prints git changes.
# Sometimes getting all the changes for some reason causes a large delay 
# before the prompt shows up again.
export PRINT_GIT_CHANGES='true'

PS1="\n\[${BOLD}${MAGENTA}\]\t[\u] \[$WHITE\]at \[$ORANGE\]\h \[$WHITE\]in \[${BOLD}${GREEN}\]\w\[$WHITE\]\$([[ -n \$(git branch 2> /dev/null) ]] && echo \" on \")\[$PURPLE\]\$(__promptline_vcs_branch)\[$WHITE\]\n\$ \[$RESET\]"

